// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/billing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingServiceClient interface {
	GetUserById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AddUser(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (*OkMessage, error)
	UpdateUser(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCredits(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error)
	UpdateCredits(ctx context.Context, in *CreditResponse, opts ...grpc.CallOption) (*OkMessage, error)
	GetCoupons(ctx context.Context, in *CouponRequest, opts ...grpc.CallOption) (BillingService_GetCouponsClient, error)
	AddCoupons(ctx context.Context, in *CouponResponse, opts ...grpc.CallOption) (*OkMessage, error)
	RedeemCoupons(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*OkMessage, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetUserById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/BillingService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) AddUser(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (*OkMessage, error) {
	out := new(OkMessage)
	err := c.cc.Invoke(ctx, "/BillingService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateUser(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillingService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillingService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetCredits(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error) {
	out := new(CreditResponse)
	err := c.cc.Invoke(ctx, "/BillingService/GetCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateCredits(ctx context.Context, in *CreditResponse, opts ...grpc.CallOption) (*OkMessage, error) {
	out := new(OkMessage)
	err := c.cc.Invoke(ctx, "/BillingService/UpdateCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetCoupons(ctx context.Context, in *CouponRequest, opts ...grpc.CallOption) (BillingService_GetCouponsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillingService_ServiceDesc.Streams[0], "/BillingService/GetCoupons", opts...)
	if err != nil {
		return nil, err
	}
	x := &billingServiceGetCouponsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BillingService_GetCouponsClient interface {
	Recv() (*CouponResponse, error)
	grpc.ClientStream
}

type billingServiceGetCouponsClient struct {
	grpc.ClientStream
}

func (x *billingServiceGetCouponsClient) Recv() (*CouponResponse, error) {
	m := new(CouponResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingServiceClient) AddCoupons(ctx context.Context, in *CouponResponse, opts ...grpc.CallOption) (*OkMessage, error) {
	out := new(OkMessage)
	err := c.cc.Invoke(ctx, "/BillingService/AddCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) RedeemCoupons(ctx context.Context, in *RedeemRequest, opts ...grpc.CallOption) (*OkMessage, error) {
	out := new(OkMessage)
	err := c.cc.Invoke(ctx, "/BillingService/RedeemCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility
type BillingServiceServer interface {
	GetUserById(context.Context, *UserRequest) (*UserResponse, error)
	AddUser(context.Context, *UserResponse) (*OkMessage, error)
	UpdateUser(context.Context, *UserResponse) (*emptypb.Empty, error)
	DeleteUser(context.Context, *UserRequest) (*emptypb.Empty, error)
	GetCredits(context.Context, *CreditRequest) (*CreditResponse, error)
	UpdateCredits(context.Context, *CreditResponse) (*OkMessage, error)
	GetCoupons(*CouponRequest, BillingService_GetCouponsServer) error
	AddCoupons(context.Context, *CouponResponse) (*OkMessage, error)
	RedeemCoupons(context.Context, *RedeemRequest) (*OkMessage, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (UnimplementedBillingServiceServer) GetUserById(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedBillingServiceServer) AddUser(context.Context, *UserResponse) (*OkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedBillingServiceServer) UpdateUser(context.Context, *UserResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBillingServiceServer) DeleteUser(context.Context, *UserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBillingServiceServer) GetCredits(context.Context, *CreditRequest) (*CreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredits not implemented")
}
func (UnimplementedBillingServiceServer) UpdateCredits(context.Context, *CreditResponse) (*OkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredits not implemented")
}
func (UnimplementedBillingServiceServer) GetCoupons(*CouponRequest, BillingService_GetCouponsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCoupons not implemented")
}
func (UnimplementedBillingServiceServer) AddCoupons(context.Context, *CouponResponse) (*OkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupons not implemented")
}
func (UnimplementedBillingServiceServer) RedeemCoupons(context.Context, *RedeemRequest) (*OkMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemCoupons not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUserById(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).AddUser(ctx, req.(*UserResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateUser(ctx, req.(*UserResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/GetCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetCredits(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/UpdateCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateCredits(ctx, req.(*CreditResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetCoupons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CouponRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServiceServer).GetCoupons(m, &billingServiceGetCouponsServer{stream})
}

type BillingService_GetCouponsServer interface {
	Send(*CouponResponse) error
	grpc.ServerStream
}

type billingServiceGetCouponsServer struct {
	grpc.ServerStream
}

func (x *billingServiceGetCouponsServer) Send(m *CouponResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BillingService_AddCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).AddCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/AddCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).AddCoupons(ctx, req.(*CouponResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_RedeemCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).RedeemCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillingService/RedeemCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).RedeemCoupons(ctx, req.(*RedeemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _BillingService_GetUserById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _BillingService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BillingService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BillingService_DeleteUser_Handler,
		},
		{
			MethodName: "GetCredits",
			Handler:    _BillingService_GetCredits_Handler,
		},
		{
			MethodName: "UpdateCredits",
			Handler:    _BillingService_UpdateCredits_Handler,
		},
		{
			MethodName: "AddCoupons",
			Handler:    _BillingService_AddCoupons_Handler,
		},
		{
			MethodName: "RedeemCoupons",
			Handler:    _BillingService_RedeemCoupons_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCoupons",
			Handler:       _BillingService_GetCoupons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/billing.proto",
}
